@model Presentation.Models.PasswordModel

@{
	ViewBag.Title = "PasswordChange";
}

@using (Html.BeginForm())
{
	@Html.AntiForgeryToken()

	<div class="form-horizontal" style="width:60%">
		<h4>Slaptažodžio atnaujinimo langas, norėdami pakeisti slaptažodį, įveskite savo senąjį</h4>
		<h5> *naujas slaptažodis neturi karotis su senu</h5>
		<hr />
		@Html.ValidationSummary(true, "", new { @class = "text-danger" })
		<div class="form-group">
			@Html.LabelFor(model => model.OldPassword, htmlAttributes: new { @class = "control-label col-md-2" })
			<div class="col-md-10">
				@Html.EditorFor(model => model.OldPassword, new { htmlAttributes = new { @class = "form-control" } })
				@Html.ValidationMessageFor(model => model.OldPassword, "", new { @class = "text-danger" })
			</div>
		</div>
		<div class="form-group">
			@Html.LabelFor(model => model.NewPassword, htmlAttributes: new { @class = "control-label col-md-2" })
			<div class="col-md-10">
				@Html.EditorFor(model => model.NewPassword, new { htmlAttributes = new { @class = "form-control" } })
				@Html.ValidationMessageFor(model => model.NewPassword, "", new { @class = "text-danger" })
			</div>
		</div>
		<div class="form-group">
			@Html.LabelFor(model => model.RepeatedNewPassword, htmlAttributes: new { @class = "control-label col-md-2" })
			<div class="col-md-10">
				@Html.EditorFor(model => model.RepeatedNewPassword, new { htmlAttributes = new { @class = "form-control" } })
				@Html.ValidationMessageFor(model => model.RepeatedNewPassword, "", new { @class = "text-danger" })
			</div>
		</div>
		<div class="form-group">
			<div class="col-md-offset-2 col-md-10">
				<input type="submit" value="Išsaugoti naują slaptažodį" class="btn btn-default" />
				<button type="button" class="btn btn-dark" onclick="location.href='@Url.Action("EditProfile")'">Grįžti į paskyros redavimo langą</button>
			</div>
		</div>
	</div>
}



